ng-app
ng-controller
ng-init
ng-model
{{ firstName}}
ng-repeat
Scope 作用范围
View 视图 即 HTML
Model 模型 当前视图中可用的数据
Controller 控制器 即javascript 函数 可以添加或修改属性

根作用域 所有的应用都有一个$rootScoe 他可以作用在ng-app 指令包含的所有HTML元素中

ng-controller 指令定义了应用程序控制器
控制器是javaScript对象 由标准的Javascript 对象的构造函数创建

引用解析,AngularJS 应用程序由ng-app 定义,应用程序在<div> 内运行.
ng-controller="myCtrl" 属性是一个AngularJS 指令,用于定义一个控制器.
myCtrl 函数是一个JavaScript 函数,AngularJS 使用$scope对象来调用控制器,

AngularJS 过滤器
currency 格式化数字为货币格式
filter 从数组中选择一个子集
lowercase 格式化字符串为小写
orderBy 根据某个表达式排列数组
uppercase 格式化字符串为大写

表达式中添加过滤器 过滤器可以通过一个管道字符 ( | ) 和一个过滤器添加到表达式中...
{{lasetName | uppercase}}


AngularJS服务 Service

$location服务 他可以返回当前页面的url 地址

$http是AngularJS 应用中最常用的服务,服务想服务器发送请求,应用服务器传送过来的数据
var app=angular.module('myApp',[]);
app.controller('myCtrl',function($scope,$http){
	$http.get("welcome.htm").then(function(response){
		$scope.myWelcome=response.data;
	});
});

$timeout 服务
var app=angular.module.('myApp',[]);
app.controller('myCtrl',function($scope,$timeout){
	$scope.myheader="Hello World !";

	$timeout(function(){
		$scope.myHeader="How are you today?";
	},2000);
})


$http 请求web服务器的数据
$http.get(url) 用于读取服务器数据的函数

var app=angular.module('myApp',[]);
app.controller('customersCtrl',function($scope,$http){
	$http.get("http://www.runoob.com/try/angularjs/data/Customers_JSON.php")
	.success(function(response){$scope.name=response.records;});
});

ng-options 创建选择框
<select ng-model="selectedName" ng-options="x for x in names">
</select>

ng-repeat 指令是通过数组来循环HTML 代码来创建下拉列表 但ng-options指令更适合创建下拉列表 它有以下优势:
使用ng-options 的选项的一个对象 ng-repeat 是一个字符串

AngularJS 表格

<div ng-app="myApp" ng-controller="customersCtrl">
	<table>
		<tr ng-repeat="x in names |orderBy :'Country'">
			<td>{{$index+1}}</td>
			<td>{{x.Name}}</td>
			<td>{{x.Country}}</td>
		</tr>
	</table>
</div>
<script>
var app=angular.module('myApp',[]);
app.controller('customersCtrl',function($scope,$http){
	$http.get("http:www.runoob.com/try/angularjs/data/Cutomers_JSON.php")
	.success(function(response){$scope.nams=response.records;});
});
</script>


ng-disabled 指令
ng-disabled 指令直接绑定应用程序数据到HTML的disabled 属性


ng-show 指令隐藏或显示一个HTML元素

<div ng-app="">
<p ng-show="hour > 12">我是可见的.</p>
</div>


ng-hide 指令用于隐藏或显示HTML 元素

ng-click 指令定义了Angular点击事件

添加指令
<div ng-app="myApp" runoob-directive></div>
<script>
var app=angular.module('myApp',[]);
app.directive("runoobDirective",function(){
	return {
		template:"我在指令构造器中创建"
	}
})
</script>



表单验证

<div ng-app="myApp" ng-controller="formCtrl">
  <form novalidate>
    First Name:<br>
    <input type="text" ng-model="user.firstName"><br>
    Last Name:<br>
    <input type="text" ng-model="user.lastName">
    <br><br>
    <button ng-click="reset()">RESET</button>
  </form>
  <p>form = {{user}}</p>
  <p>master = {{master}}</p>
</div>

<script>
var app = angular.module('myApp', []);
app.controller('formCtrl', function($scope) {
    $scope.master = {firstName: "John", lastName: "Doe"};
    $scope.reset = function() {
        $scope.user = angular.copy($scope.master);
    };
    $scope.reset();
});
</script>


$dirty 表单没有填写记录
$valid 字段内容合法的
$invalid 字段内容是非法的
$pristine 表单没有填写记录


Angularjs 全局API

Angularjs 全局API 

AngularJS 全局API 用于执行常见任务的JAVAsCRIPT 函数集合 如:
比较对象
迭代对象
转换对象

angular.lowercase()
angular.uppercase()
angular.isString()
angular.isNumber()

Angularjs 包含 html 中包含Html
ng-include

angularjs 动画
angularjs 提供了动画效果,可以配合css 使用
angularjs 使用动画需要引入angular-animate.js 库
还需在应用中使用 模型ngAnimate

如果我们应用已经设置了应用名,可以吧ngAnimate 直接添加在模型中
应用中的动画不易过多,但合适的动画可以增加页面的丰富性,也可以更易让用户理解
var app =angular.module('myApp',['ngAnimate']);


Angularjs 依赖注入
wiki 上的解释是:依赖注入是一种软件设计模式,在这种模式下,一个或更多的依赖(或服务)被注入(或者通过引用传递)
到一个独立的对象(或客户端)中,然后成为该客户端状态的一部分.

该模式分离了客户端依赖本身行为的创建,这使得程序设计变得松耦合,并遵循依赖反转和单一职能原则,与服务器定位器模式形成直接对比的是,它允许客户端了解客户端如何使用该系统找到依赖.

一句话 没事你不要来找我,有事我会去找你.

AngularJS 提供了很好的依赖注入机制,以下5个核心组件用来作为依赖注入.
value
factory
sevice
provider
constant

value是一个简单的javascript 对象,用于向控制器传递值(配置阶段)
//定义一个模块
var app=angular.module('mainApp',[]);
//创建value对象 "defaultInput" 并传递数据
mainApp.value('defaultInput',5);
...

//将 "defaultInput" 注入到控制器
mainApp.controller('CalcController',function($scope,CalcService,defaultInput){
	$scope.number=defaultInput;
	$scope.result=CalcService.square($scope.number);

	$scope.square=function(){
		$scope.result=CalcService.square($scope.number);
	}

})


factory 是一个函数用于返回值,在service 和controller 需要时创建
通常我们使用factory函数来计算或返回值.

定义一个模块
var mainApp=angular.module('mainApp',[]);
//创建 factory "MathService" 用于二说数的乘积 
mainApp.factory('MathService',function(){
	var factory={};
	factory.multiply=function(a,b){
		return a*b
	}
	return factory;
});

mainApp.service('CalcService',function(MathService){
	this.square=function(){
		return MathService.multiply(a,a);
	}
});

provider AngulerJS 中通过provider 创建service ,factory 等配置阶段.
Provider 中提供一个factory 方法get() 它用于返回value /service /fatory.

//定义一个模块
var mainApp=angular.module('mainApp',[]);
...
//使用provider 创建service 定义一个方法用于计算两数乘积
mainApp.config(function($provide){
	$provide.provider('MathService',function(){
		this.$get=function(){
			var factory={};
			factory.multity=function(a,b){
				return a*b;
			}
			return factory;
		};
	});
});


constant 常量 用来配置阶段传递数值,之注意这个常量子啊配置阶段是不可用的.

mainApp.constant('configparam',"constant value");


<html>
   
   <head>
      <meta charset="utf-8">
      <title>AngularJS  依赖注入</title>
   </head>
   
   <body>
      <h2>AngularJS 简单应用</h2>
      
      <div ng-app = "mainApp" ng-controller = "CalcController">
         <p>输入一个数字: <input type = "number" ng-model = "number" /></p>
         <button ng-click = "square()">X<sup>2</sup></button>
         <p>结果: {{result}}</p>
      </div>
      
      <script src="http://apps.bdimg.com/libs/angular.js/1.4.6/angular.min.js"></script>
      
      <script>
         var mainApp = angular.module("mainApp", []);
         
         mainApp.config(function($provide) {
            $provide.provider('MathService', function() {
               this.$get = function() {
                  var factory = {};
                  
                  factory.multiply = function(a, b) {
                     return a * b;
                  }
                  return factory;
               };
            });
         });
			
         mainApp.value("defaultInput", 5);
         
         mainApp.factory('MathService', function() {
            var factory = {};
            
            factory.multiply = function(a, b) {
               return a * b;
            }
            return factory;
         });
         
         mainApp.service('CalcService', function(MathService){
            this.square = function(a) {
               return MathService.multiply(a,a);
            }
         });
         
         mainApp.controller('CalcController', function($scope, CalcService, defaultInput) {
            $scope.number = defaultInput;
            $scope.result = CalcService.square($scope.number);

            $scope.square = function() {
               $scope.result = CalcService.square($scope.number);
            }
         });
			
      </script>
      
   </body>
</html>












