1:<meta name="viewport" content="width=device-width,initial-scale=1">

2:布局容器,Bootstrap 需要为页面内容和栅格系统包裹一个.container容器.我们提供了两个作此用处的类,
注意,由于padding等属性的原因,这二种容器类不能相互嵌套 .container类用于固定宽度并支持响应式布局的容器

3:.container-fluid 类用于100%宽度占据全部视口的容器.

4:栅格系统用于通过一系列的行(row) 与列(column) 的组合来创建页面布局,你的内容就可以放入这些创建好的布局中,下面介绍一下Bootstrap栅格系统的工作原理:

5:行(row) 必须包含在.container (固定宽度) 或.container-fluid(100%宽度)中,以便为其赋予合适的排列(aligment) 和内部(padding).

6:通过 行(row) 在水平方向创建一组列(column)

7:你的内容应当放置于 列内,并且只有列column 可以作为行的直接子元素.

8:类似.row 和col-xs-4 这种预定义的类,可以用来快速创建栅格布局,Bootstrap 源码中定义的mixin也可以用来创建语义化的布局.

9:通过为 列"column" 设置padding属性 从而创建列与列之间的间隔.通过.row 元素设置负值margin 从而抵消掉为.container元素设置的padding ,也就间接为行(row) 所包含的类(column) 抵消掉了padding

10:负值的margin 就是下面的实例为什么是向外突出的原因,在栅格列中的内容排成一行

11:栅格系统中的列是通过指定1到12的值来表示其跨越的范围,例如,三个等宽的列可以使用三个.col.xs-4 来创建

12:如果一行row 中包含了的列大于12 多余的列所在的元素将被作为一个整体另起以行排列

13:栅格类适用于与屏幕宽度大于或等于分界点大小的设备,并且针对小屏幕设备覆盖栅格类,因此 在元素上应用任何.col-md-* 栅格类适用于与屏幕宽度大于等于分界点大小的设备,并且针对小屏幕设备覆盖栅格类,因此,在元素上应用任何.col-lg-* 不存在,也不影响大屏幕设备

14:媒体查询在栅格系统中,我们在Less 文件中使用以下媒体查询(media query) 来创建关键的分界点阈值
/* 超小屏幕(手机,小雨768px) */
/*没有任何媒体查询相关的代码,因为这在Bootstrap 中是默认的(还记得Bootstrap是移动设备优先的吗?)*/

/*小屏幕 (平板,大于等于768px)*/
@media (min-width: @screen-sm-min){...}

/*中等屏幕(桌面显示器,大于等于992px) */
@media (min-width :@screen-md-min)(...)

/*大屏幕(大桌面显示器,大于等于1200px)*/
@media (min-width:@screen-lg-min){....}

15:.col-xs-   .col-sm- .col-md-  .col-lg-

16:.col-md-offset-*
	.col-md-pull-*
	.col-md-push-*

17:排版尺寸 @font-size-base 和@line-height-base
	<mark>
	<del>
	<s>
	<ins>
	<u>
	<small> .small
	<strong>
	<em>

18:对齐
	.text-left
	.text-center
	.text-right
	.text-justify
	.text-nowrap

19:改变大小写
	.text-lowercase
	.text-uppercase
	.text-capitalize

20:缩略语
	<abbr title="attribute">attr</abbr>
	<abbr title="HyperText Markup Language" class="initialism">HTML</abbr>
	<address>
	  <strong>Twitter, Inc.</strong><br>
	  795 Folsom Ave, Suite 600<br>
	  San Francisco, CA 94107<br>
	  <abbr title="Phone">P:</abbr> (123) 456-7890
	</address>

	<address>
	  <strong>Full Name</strong><br>
	  <a href="mailto:#">first.last@example.com</a>
	</address>

	<blockquote>
	  <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.</p>
	  <footer>Someone famous in <cite title="Source Title">Source Title</cite></footer>
	</blockquote>
	通过.blockquote-reverse 类可以让引用呈现内容右对齐的效果.

21列表
	.list-style 移除了默认的list-style 样式和左侧外边距的一组元素,这是针对直接子元素的,也就是说,你需要对所有嵌套
	的列表都添加这个类才能具有同样的样式

	.list-unstyled 

	内联列表 通过设置display:inline-block; 并添加少量的内部padding 将所有元素放置于同一行.

	带有描述的短语列表
	<dl>
		<dt></dt>
		<dd></dd>
	</dl>

	水平排列的描述
	.dl-horizontal 可以让<dl> 内的短语及其描述排在一行,开始是像<dl>的默认样式堆叠在一起,随着导航条逐渐展开而排列一行.

	自动截断
	通过 text-overflow 属性 水平排列的描述列表将会截断左侧太长的短语,在较窄的视口内,列表将变为默认堆叠排列的布局方式.

22表格:
	(1)基本实例 为任意<table> 标签添加.table 类可以为其赋予基本的样式 少量的内部(padding) 和水平方向的分割线.这种方法看起来多余!? 但我们觉得
	表格元素使用的很广泛,如果我们为其赋予默认样式可能会影响例如日历 和日期选择之类的插件,所以我们选择将其此样式独立出来
	(2) 条纹状表格 通过.table-striped类可以给<tbody> 之内的每一行增加斑马条纹样式.
	(3) 带边框的表格 添加.table-bordered 类为表格和其中的每个单元格增加边框
	(4)通过添加.table-hover 类可以让<tbody> 中的每一行对鼠标悬停状态做出响应
	(5) 通过添加.table-condensed类可以让表格更加紧凑,单元格中的内补(padding)均会减半.
	









