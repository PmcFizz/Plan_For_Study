			JavaScript Study Note


今天看了js 的一个比较旧的教程文档,总体上没什么收获, 以后选教程最好还是看看创建时间和更新时间 
免得看完了,介绍的都是一些过时的东西.意义甚微...

看了一部分 JScript 文档,感觉好不错.2000年写的,还是有很多有用的方法.
明天需要把这个文档看完,并复习以前写的css 笔记

function pasta(grain, width, shape, hasEgg)
{
    // 是用什么粮食做的？
    this.grain = grain;

    // 多宽？（数值）
    this.width = width;     

    // 横截面形状？（字符串）
    this.shape = shape;   

// 是否加蛋黄？（boolean）
    this.hasEgg = hasEgg;  
}

var spaghetti = new pasta("wheat", 0.2, "circle", true);
pasta.prototype.foodgroup = "carbohydrates"
spaghetti.foodgroup


创建对象  对象属性  对象方法, new对象 

内部对象
创建高级对象:
function Circle(xPoint,yPoint,radius){
	this.x=xPoint;
	this.y=yPoint;
	this.r=radius;
}
var aCircle=new Circle(5,11,99);

Circle=prototype.pi=Math.PI;
function ACirclesArea(){
	return this.pi*this.r*this.r; //计算面积
}
Cricle.prototype.area=ACircleArea;
var a=ACircle.area();

递归:
如果这个数小于零,则拒绝接受.如果不是一个整数,则将其向下舍入为相邻的整数,如果这个数为0,则其阶乘为1.
如果这个数大于0 则将其与相邻的数的阶乘相乘.
要计算任何一个大于0 的数的阶乘,至少需要计算一个其他数的阶乘,用来实现这个功能的函数就是已经位于其中的函数,该函数在执行当前的这个数之前,必须调用它本身来计算相邻的较小数的阶乘,这就是一个递归实例

递归实例--
function factorial(aNaumber){
	aNumber=Math.floor(aNumber);
	if(aNumber<0){
		return -1
	}
	if(aNumber==0){
		return 1;
	}else{
		return (aNumber*factorial(aNumber-1));
	}
}

传递参数给函数:
 按值传递一个参数给函数就是制造该函数的一个独立副本,即一个只存在于该函数内的副本,即使按引用传递对象和数组时,如果直接在函数用新值覆盖原先的值,在函数外并不反映新值.只有只有对象的属性或者数组的元素改变时 在函数外才能看的出来.

function Clobber(param){
	param=new Object();
	param.message="This will not work";
}

function Update(param){
	params.message="I was Changed";
}
var obj =new Object();
obj.message="This is the origin ";
Clobber(obj);
alert(obj);

Upldate(obj);
alert(obj);

with 关键字:
with 语句可以方便地用来引用某个特定对象中已有的属性,但是不能用来给对象添加属性.要给队形创建新的属性,必须明确地引用该对象.

document.write();
document.writeln();

alert 
confirm()
prompt

数组处理:

join()
length
reverse
slice
sort

日期和时间 Date
getDate
getDay
getFullYear
getHours
getMilliseconds
getMinutes
getMonth
getSeconds
getTime
getTimezoneOffset
getYear


函数:
arguments
Caller

Global方法
Global 
escape
unescape
eval
isFinite
isNaN

数学:
Math
abs
acos
asin
atan2
ceil
cos
exp
floor
log
max
min
pow
random
round
sin 
sqrt
tan

字符串:
String
charAt
charCodeAt
fromCharCode
indexOf
lastIndexOf
split
toLowerCase
toUpperCase
concat
slice
math
replace
search

JS方法:

Math.abs(number);
求一个数字的绝对值

Math.acos(number);
求一个数的反余弦值

apply 
apply([thisObj[,argArray]]);
应用某一对象的一个方法,用另一个对象替换当前对象.

Math.asin(number);
返回值为数字参数的反正炫值

Math.atan(number);
返回值为其数字参数的反正切值

Math.atan2(y,x);
返回X轴到点(y,x)点的角度(以弧度为单位);

call 方法
call([thisObj[,arg1[, arg2[,   [,.argN]]]]])
参数:
thisObj 可选项,将被用作当前对象的对象.
arg1 arg2 argN
可选项,将被传递方法参数序列
说明:
call 方法可以用来代替另一个对象调用一个方法.call 方法可将一个函数的对象上下文从初始的上下文改变为有thisObj 指定的新的对象


ceil方法
Math.ceil(number);
返回大于等于其数字参数的最小整数

charAt()方法
strObj.charAt(index);
返回指定索引位置处的字符

charCodeAt方法:
strObj.charCodeAt(index);
返回一个正数,代表指定位置上字符的Unicode 编码

compile 方法
rgExp.compile(pattern,[flags]);
把正则表达式编译为内部格式,从而执行的更快

concat 方法(Array)
array1.concat([item1[, item2[, . . . [, itemN]]]])
返回一个新的数组,这个新数组是由二个或更多数组组合而成.

concat方法(String)
string1.concat([string2[, string3[, . . . [, stringN]]]]);
返回字符串值,该值包含了二个或更多提供的字符的链接.
concat 方法的结果等于 result=string1+string2+string3

cos方法:
Math.cos(number);
返回值为其数字参数的余弦值.

decodeURL 方法
decodeURL(URLstring)
返回一个已编码的统一资源标识符(URI) 的非编码形式.

decodeURIComponent方法
decodeURIComponent(encodedURIString)
返回统一资源标识符 (URI) 的一个已编码组件的非编码形式。

encodeURI 方法
encodeURI(URIString)
将文本字符串编码为一个有效的统一资源标识符 (URI)。

encodeURIComponent 方法
encodeURIComponent(encodedURIString)
将文本字符串编码为一个统一资源标识符 (URI) 的一个有效组件。

eval方法
eval(codeString)
检查JS 代码并执行

exec方法
rgExp.exec(str);
用正则表达模式在字符串中运行查找,并返回包含该查找结果的一个数组

exp方法
Math.exp(number);
返回e的幂。 



