			JavaScript Study Note


今天看了js 的一个比较旧的教程文档,总体上没什么收获, 以后选教程最好还是看看创建时间和更新时间 
免得看完了,介绍的都是一些过时的东西.意义甚微...

看了一部分 JScript 文档,感觉好不错.2000年写的,还是有很多有用的方法.
明天需要把这个文档看完,并复习以前写的css 笔记

function pasta(grain, width, shape, hasEgg)
{
    // 是用什么粮食做的？
    this.grain = grain;

    // 多宽？（数值）
    this.width = width;     

    // 横截面形状？（字符串）
    this.shape = shape;   

// 是否加蛋黄？（boolean）
    this.hasEgg = hasEgg;  
}

var spaghetti = new pasta("wheat", 0.2, "circle", true);
pasta.prototype.foodgroup = "carbohydrates"
spaghetti.foodgroup


创建对象  对象属性  对象方法, new对象 

内部对象
创建高级对象:
function Circle(xPoint,yPoint,radius){
	this.x=xPoint;
	this.y=yPoint;
	this.r=radius;
}
var aCircle=new Circle(5,11,99);

Circle=prototype.pi=Math.PI;
function ACirclesArea(){
	return this.pi*this.r*this.r; //计算面积
}
Cricle.prototype.area=ACircleArea;
var a=ACircle.area();

递归:
如果这个数小于零,则拒绝接受.如果不是一个整数,则将其向下舍入为相邻的整数,如果这个数为0,则其阶乘为1.
如果这个数大于0 则将其与相邻的数的阶乘相乘.
要计算任何一个大于0 的数的阶乘,至少需要计算一个其他数的阶乘,用来实现这个功能的函数就是已经位于其中的函数,该函数在执行当前的这个数之前,必须调用它本身来计算相邻的较小数的阶乘,这就是一个递归实例

递归实例--
function factorial(aNaumber){
	aNumber=Math.floor(aNumber);
	if(aNumber<0){
		return -1
	}
	if(aNumber==0){
		return 1;
	}else{
		return (aNumber*factorial(aNumber-1));
	}
}

传递参数给函数:
 按值传递一个参数给函数就是制造该函数的一个独立副本,即一个只存在于该函数内的副本,即使按引用传递对象和数组时,如果直接在函数用新值覆盖原先的值,在函数外并不反映新值.只有只有对象的属性或者数组的元素改变时 在函数外才能看的出来.

function Clobber(param){
	param=new Object();
	param.message="This will not work";
}

function Update(param){
	params.message="I was Changed";
}
var obj =new Object();
obj.message="This is the origin ";
Clobber(obj);
alert(obj);

Upldate(obj);
alert(obj);

with 关键字:
with 语句可以方便地用来引用某个特定对象中已有的属性,但是不能用来给对象添加属性.要给队形创建新的属性,必须明确地引用该对象.

document.write();
document.writeln();

alert 
confirm()
prompt

数组处理:

join()
length
reverse
slice
sort

日期和时间 Date
getDate
getDay
getFullYear
getHours
getMilliseconds
getMinutes
getMonth
getSeconds
getTime
getTimezoneOffset
getYear


函数:
arguments
Caller

Global方法
Global 
escape
unescape
eval
isFinite
isNaN

数学:
Math
abs
acos
asin
atan2
ceil
cos
exp
floor
log
max
min
pow
random
round
sin 
sqrt
tan

字符串:
String
charAt
charCodeAt
fromCharCode
indexOf
lastIndexOf
split
toLowerCase
toUpperCase
concat
slice
math
replace
search

JS方法:

Math.abs(number);
求一个数字的绝对值

Math.acos(number);
求一个数的反余弦值

apply 
apply([thisObj[,argArray]]);
应用某一对象的一个方法,用另一个对象替换当前对象.

Math.asin(number);
返回值为数字参数的反正炫值

Math.atan(number);
返回值为其数字参数的反正切值

Math.atan2(y,x);
返回X轴到点(y,x)点的角度(以弧度为单位);

call 方法
call([thisObj[,arg1[, arg2[,   [,.argN]]]]])
参数:
thisObj 可选项,将被用作当前对象的对象.
arg1 arg2 argN
可选项,将被传递方法参数序列
说明:
call 方法可以用来代替另一个对象调用一个方法.call 方法可将一个函数的对象上下文从初始的上下文改变为有thisObj 指定的新的对象


ceil方法
Math.ceil(number);
返回大于等于其数字参数的最小整数

charAt()方法
strObj.charAt(index);
返回指定索引位置处的字符

charCodeAt方法:
strObj.charCodeAt(index);
返回一个正数,代表指定位置上字符的Unicode 编码

compile 方法
rgExp.compile(pattern,[flags]);
把正则表达式编译为内部格式,从而执行的更快

concat 方法(Array)
array1.concat([item1[, item2[, . . . [, itemN]]]])
返回一个新的数组,这个新数组是由二个或更多数组组合而成.

concat方法(String)
string1.concat([string2[, string3[, . . . [, stringN]]]]);
返回字符串值,该值包含了二个或更多提供的字符的链接.
concat 方法的结果等于 result=string1+string2+string3

cos方法:
Math.cos(number);
返回值为其数字参数的余弦值.

decodeURL 方法
decodeURL(URLstring)
返回一个已编码的统一资源标识符(URI) 的非编码形式.

decodeURIComponent方法
decodeURIComponent(encodedURIString)
返回统一资源标识符 (URI) 的一个已编码组件的非编码形式。

encodeURI 方法
encodeURI(URIString)
将文本字符串编码为一个有效的统一资源标识符 (URI)。

encodeURIComponent 方法
encodeURIComponent(encodedURIString)
将文本字符串编码为一个统一资源标识符 (URI) 的一个有效组件。

eval方法
eval(codeString)
检查JS 代码并执行

exec方法
rgExp.exec(str);
用正则表达模式在字符串中运行查找,并返回包含该查找结果的一个数组

exp方法
Math.exp(number);
返回e的幂。 

floor方法
Math.floor(number);
返回值为小于等于其数值参数的最大整数值

fromCharCode
String.fromCharCode([code1[, code2[, ...[, codeN]]]])
String 为必选项 从一些Unicode 字符值中返回一个字符串

getDate 方法
dateObj.getDate()
返回Date对象中用本地时间表示的一个月中的日期值

getDay方法
dateObj.getDay();
返回Date对象中用本地时间表示的一周中的日期值

getFullYear 方法
dateObj.getFullYear()
返回Date对象中本地时间表示的年份值

getHours方法
dateObj.getHours();
返回Date对象中用本地时间表示的小时值

getItem方法
safeArray.getItem(dimension1[, dimension2, ...], dimensionN)
返回指定位置的项

getMilliseconds方法
dateObj.getMilliseconds();
返回Date对象中 用本地时间表示的毫秒值

getMinutes方法
dateObj.getMinutes()
返回Date 对象中用本地时间表示的分钟值

getMonth 方法
dateObj.getMonth();
返回Date 对象中用本事时间表示的月份值

getSeconds方法
dateObj.getSeconds()
返回Date 对象中用本地时间表示的秒值

getTime()
dateObj.getTime()
返回Date 对象中的时间值

getYear 方法
dateObj.getYear();
返回Date 对象中的年份值

indexOf 方法
strObj.indexOf(subString[, startIndex]);
返回String 对象内第一次出现子字符串的字符位置

isFinite 方法
isFinite(number);
返回一个Boolean 值 指明所提供的数字是否是有限的

isNaN 方法
isNaN(number)
返回一个Boolean值 指明提供的值是否是保留值NaN (不是数字)

item 方法
enumObj.item();
返回集合的当前项

join 方法
arrayObj.join(separator);
返回字符串值,其中包含了链接到一起的数组的所有元素,元素有指定的分割符分隔开来

lastIndexOf 方法
strObj.lastIndexOf(substring[,startindex]);
返回String 对象中子字符串最后出现的位置

localeCompare 方法
stringVar.localeCompare(stringExp);
返回一个值,指出在当前的区域设置中二个字符串是否相同

log 方法
Math.log(number);
返回数字的自然数

match 方法
stringObj.match(rgExp);
使用正则表达式模式对字符串执行查找,并将包含查找的结果作为数组返回

max 方法
Math.max([number1[, number2[. . . [,numberN]]]]);
返回给出的零个或多个数值表达式中较大者

min方法
Math.min(number);
返回给出的菱格或多个数值表达中较小的值

moveFirst 方法
enumObj.moveFirst();
重新将集合中国的当前项设置为第一项

moveNext 方法
enumObj.moveNext();
将集合中的当前项移动到下一项

parse 方法
Date.parse();
解析一个包含日期的字符串,并返回该日期与1970年1月1日午夜之间的所隔得毫秒数
parse 方法返回一个整数值，这个整数表示 dateVal 中所包含的日期与 1970 年 1 月 1 日午夜之间相间隔的毫秒数。 

parseFloat 方法
parseFloat(numberString);
返回由字符串转化得到的浮点数

parseInt 方法
parseInt(numString,[radix]);
返回由字符串转化得到的整数

pop 方法
arrayObj.pop()
移除数组中最后一个元素并返回该元素

pow 方法
Math.pow(base,exponent);
返回底表达式的指定次幂

push 方法
arrayObj.push([item1 [item2 [. . . [itemN ]]]]);
将新元素添加到一个数组,并返回数组的新长度值

random 方法
Math.random();
返回介于0到1 之间的伪随机数

replace 方法
stringObj.replace(rgExp,replaceText)
返回根据正则表达式进行文字替换后的字符串的复制

reverse 方法
arrayObj.reverse();
返回一个元素顺序诶翻转的Array 对象

round 方法
Math.round(number);
返回与给出的数值表达式最接近的整数

search方法:
stringObj.search(rgExp);
返回与正则表达式查找内容匹配的第一个字符串的位置

setDate方法:
dateObj.setDate(numDate);
设置Date对象中用本地时间表示的数字日期

setFullYear方法:
dateObj.setFullYear(numYear[, numMonth[, numDate]]);
设置Date 对象中用本地时间表示的年份值

setHours方法:
dateObj.setHours(numHours[, numMin[, numSec[, numMilli]]]);
设置Date 对象中用本地时间表示的小时值

setMilliseconds 方法:
dateObj.setMilliseconds(numMilli);
设置Date对象中用本地时间表示的毫秒值

setMinutes方法:
dateObj.setMinutes(numMinutes[, numSeconds[, numMilli]]);
设置Date 对象中用本地时间表示的分钟值

setMonth 方法:
dateObj.setMonth(numMonth[, dateVal]);
设置Date对象中用本地时间表示的月份值

setSeconds 方法:
dateObj.setSeconds(numSeconds[, numMilli]);
设置Date 对象中用本地时间表示的秒钟值

setTime 方法:
dateObj.setTime(milliseconds);
设置Date对象的日期和时间值

setYear方法:
dateObj.setYear(numYear);
设置Date 对象中的年份值

shift方法:
arrayObj.shift();
移除数组中第一个元素并返回该元素

sin方法:
Math.sin(number);
返回数字的正弦值

slice方法(Array):
arrayObj.slice(statr,[end]);
返回一个数组的一段

slice方法(String):
strigObj.slice(start,[end]);
返回字符串的片段

sort方法:
arrayObj.sort(sortFuntion);
返回一个元素已经进行了排序的Array对象

splice方法:
arrayObj.splice(start, deleteCount, [item1[, item2[, . . . [,itemN]]]])
从一个数组中移除一个或多个元素,如果有必要,在移除元素的位置插入新元素,返回所移除的元素

split方法:
stribgObj.split([separator[, limit]]);
将一个一个字符串分割为子字符串,然后经结果作为字符串数组分返回.

sqrt方法
Math.sqrt(number);
返回数字的平方根

substr方法:
stringvar.substr(start,[,length]);
返回一个从指定位置开始的指定长度的子字符串.

substring 方法:
stringObj.substring(start,end);
返回位于String 对象中指定位置的子字符.

tan方法:
Math.tan(number);
返回数字的正弦值

test方法:
rgexp.test(str);
返回一个Boolean值,它指出在被查找的字符串中是否存在模式

toArray方法:
safeArray.toArray();
返回一个由VBArray转换而来的标准JScript数组

toDateString 方法:
objDate.toDateString();
已字符串值的形式返回一个日期

toExponential方法:
numObj.toExponential([fractionDigits]);
返回一个字符串,其中包含一个以指数计数法表示的数字

toFixed方法:
numObj.toFixed([fractionDigits]);
返回一个字符串,代表一个以定点表示的数字


toLocaleLowerCase方法:
stringVar.toLocaleLowerCase();
返回一个字符串,其中所有的字母字符都被转化为小写

toLocaleLowerCase方法
stringVar.toLocaleUpperCase();
返回一个字符串,其中所有的字母字符都被转换为大写

toString方法:
objectname.toString([radix]);
返回对象的字符串表示

toTimeString 
objDate.toTimeString();
以字符串形式返回时间

unshift 方法:
arrayObj.unshift([item1[, item2 [, . . . [, itemN]]]]);
将指定的元素插入数组开始位置并返回该数组

valueOf方法:
object.valueOf();
返回指定对象的原始值





















